class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int row = grid.size();//列个数
        if(row == 0) return 0;
        int line = grid[0].size();//行个数
        vector<vector<int> > visited(row, vector<int>(line, 0));//标记走过的
        int res = 0;
        for(int i = 0; i < row; i++){
            for(int j = 0; j < line; j++){
                if(visited[i][j] == 0 && grid[i][j] == '1'){
                    dfs(grid, visited, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    void dfs(vector<vector<char>>& grid, vector<vector<int>>& visited, int i, int j){
        if(i < 0 || i > grid.size() - 1 || j < 0 || j > grid[0].size() - 1 || grid[i][j] == '0' || visited[i][j] == 1) return;//判断边界
        visited[i][j] = 1;
        dfs(grid, visited, i - 1, j);
        dfs(grid, visited, i + 1, j);
        dfs(grid, visited, i, j - 1);
        dfs(grid, visited, i, j + 1);
    }
};