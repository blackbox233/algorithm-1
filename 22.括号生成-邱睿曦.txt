#include<bits/stdc++.h>
using namespace std;
void dfs(char a[],int left,int right);
int n,cun[10010]={0},x=0;
int main()
{	
	cin>>n;
	char a[n*2+1];
	int left=n,right=n;
	dfs(a,left,right);
    return 0;
}

void dfs(char a[],int left,int right)
{
	if(left==0&&right==0)
	{
		for(int i=0;i<n*2;i++)
		{
			cout<<a[i];
		}
		printf("\n");
		return ;
	}
	if(left>right){
		return;
	}else{
		if(left>0) {
			a[x]='(';
			x++;
			dfs(a,--left,right);
			x--;
			left++;
		}
		if(right>0) {
			a[x]=')';
			x++;
			dfs(a,left,--right);
			x--;
			right++;
		}
	}	
}

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        generateParenthesisDFS(n, n, "", res);
        return res;
    }
    void generateParenthesisDFS(int left, int right, string out, vector<string> &res) {
        if (left > right) return;
        if (left == 0 && right == 0) res.push_back(out);
        else {
            if (left > 0) generateParenthesisDFS(left - 1, right, out + '(', res);
            if (right > 0) generateParenthesisDFS(left, right - 1, out + ')', res);
        }
    }
};